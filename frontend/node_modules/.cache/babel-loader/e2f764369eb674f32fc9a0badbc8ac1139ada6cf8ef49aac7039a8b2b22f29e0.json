{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mohit\\\\Documents\\\\sass\\\\frontend\\\\src\\\\components\\\\ProductGrid.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { ProductCard, Pagination } from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProductGrid = ({\n  filters\n}) => {\n  _s();\n  const [products, setProducts] = useState([]);\n  const [totalPages, setTotalPages] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchProducts = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const query = new URLSearchParams({\n          ...filters,\n          page: currentPage\n        }).toString();\n        const response = await fetch(`/api/products?${query}`);\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch products\");\n        }\n        const data = await response.json();\n        setProducts(data.products);\n        setTotalPages(Math.ceil(data.count / 10));\n      } catch (error) {\n        setError(error.message);\n        console.error(\"Failed to fetch products:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchProducts();\n  }, [filters, currentPage]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-red-500\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-6\",\n      children: \"Products\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\",\n      children: products.map((product, index) => /*#__PURE__*/_jsxDEV(ProductCard, {\n        product: product\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      currentPage: currentPage,\n      totalPages: totalPages,\n      onPageChange: setCurrentPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(ProductGrid, \"e3vBBfwosn2Aq3J/OhrXK5N1eSM=\");\n_c = ProductGrid;\nexport default ProductGrid;\nvar _c;\n$RefreshReg$(_c, \"ProductGrid\");","map":{"version":3,"names":["React","useEffect","useState","ProductCard","Pagination","jsxDEV","_jsxDEV","ProductGrid","filters","_s","products","setProducts","totalPages","setTotalPages","currentPage","setCurrentPage","loading","setLoading","error","setError","fetchProducts","query","URLSearchParams","page","toString","response","fetch","ok","Error","data","json","Math","ceil","count","message","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","product","index","onPageChange","_c","$RefreshReg$"],"sources":["C:/Users/mohit/Documents/sass/frontend/src/components/ProductGrid.js"],"sourcesContent":["\r\nimport React, { useEffect, useState } from 'react';\r\nimport { ProductCard, Pagination } from './Card'; \r\n\r\nconst ProductGrid = ({ filters }) => {\r\n  const [products, setProducts] = useState([]);\r\n  const [totalPages, setTotalPages] = useState(0);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null); \r\n\r\n  useEffect(() => {\r\n    const fetchProducts = async () => {\r\n      setLoading(true);\r\n      setError(null); \r\n      try {\r\n        const query = new URLSearchParams({ ...filters, page: currentPage }).toString();\r\n        const response = await fetch(`/api/products?${query}`);\r\n        \r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch products\");\r\n        }\r\n\r\n        const data = await response.json();\r\n        setProducts(data.products);\r\n        setTotalPages(Math.ceil(data.count / 10)); \r\n      } catch (error) {\r\n        setError(error.message);\r\n        console.error(\"Failed to fetch products:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchProducts();\r\n  }, [filters, currentPage]);\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div className=\"text-red-500\">{error}</div>; \r\n\r\n  return (\r\n    <div className=\"container mx-auto p-4\">\r\n      <h2 className=\"text-2xl font-bold mb-6\">Products</h2>\r\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n        {products.map((product, index) => (\r\n          <ProductCard key={index} product={product} />\r\n        ))}\r\n      </div>\r\n      <Pagination\r\n        currentPage={currentPage}\r\n        totalPages={totalPages}\r\n        onPageChange={setCurrentPage}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductGrid;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}